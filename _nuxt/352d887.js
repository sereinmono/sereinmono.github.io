(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{736:function(n,t,o){var content=o(746);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[n.i,content,""]]),content.locals&&(n.exports=content.locals);(0,o(19).default)("38fda216",content,!0,{sourceMap:!1})},745:function(n,t,o){"use strict";o(736)},746:function(n,t,o){var e=o(18)(!1);e.push([n.i,"h1{font-size:3.75rem}h1,h2{font-weight:300;padding-top:16}h2{font-size:3rem}h3{font-size:2.125rem}h3,h4{font-weight:400;padding-top:16}h4{font-size:1.5rem}h5{font-weight:500;font-size:1.25rem}h5,h6{padding-top:16}h6{font-weight:400;font-size:1rem}p{font-size:1.25rem;font-weight:300;padding-top:16}blockquote{padding-left:30px}.my-code{background-color:transparent}",""]),n.exports=e},765:function(n,t,o){"use strict";o.r(t);var e={name:"IndexPage",computed:{md:function(){return'<section><h1>AC Activator 开发记录 （二）</h1>\n<h2>写在前面</h2>\n<p>在上一篇文章中，我谈论到了主界面从草稿到实现的过程。现在，我们需要将设置页面编写出来。这个页面允许用户输入自己希望使用的 KMS 地址，并同时允许用户对其他的偏好设置进行调整。由于这还仅仅只是 AC Activator 的第一个版本，所以我只将更改 KMS 服务器的功能加进了设置中。我选择将 KMS 相关设置分散进『设置』页中而非将其一起放在首页，是为了保持简洁性和可用性。比起认为用户是全知全能的、理智的『操作者』，我更愿意相信 <strong>『用户喝多了』</strong> （The User Is Drunk）。这是一种设计哲学，即采取对用户的理智的零预期，尽一切能力将 App 设计成最为简便易用的样子，作为一个开发者，千万不要过于期望用户使用你应用程序的能力有多高，更何况这就是一个面向于小白的程序——应用的『易于使用』是第一个要考虑的。</p>\n<h2>设置前台的实现</h2>\n<p><img src="/blog/included_image/building_ac_activator_2/settings-page.png" alt="设置页面" /></p>\n<p>这是我们要实现的设置页面。这个页面由『常规设置』、『关于』所组成。论代码的话，前台 XAML 的实现很简单：</p>\n<pre><code class="language-xaml">&lt;Page\n    x:Class=&quot;ACActivator.SettingsPage&quot;\n    xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n    xmlns:local=&quot;using:ACActivator&quot;\n    xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;\n    xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;\n    mc:Ignorable=&quot;d&quot;\n    Background=&quot;{ThemeResource ApplicationPageBackgroundThemeBrush}&quot;&gt;\n\n\n    &lt;Grid Background=&quot;{StaticResource acBackgroundBrush}&quot;&gt;\n        &lt;RelativePanel Margin=&quot;55,20,20,0&quot; Background=&quot;{StaticResource acBackgroundBrush}&quot; HorizontalAlignment=&quot;Left&quot;&gt;\n            \n            &lt;!--使用RelativePanel的原因：当使用StackPanel时，会意外地出现所有元素居中的情况。--&gt;\n            \n            &lt;!--提醒用户这里的设置不影响Windows KMS设置。--&gt;\n            &lt;InfoBar\n                IsOpen=&quot;True&quot;\n                IsClosable=&quot;True&quot;\n                Title=&quot;注意：这并不更改您的Windows的激活设置。&quot;\n                Margin=&quot;0, 5&quot;\n                Message=&quot;更改了这里的KMS地址及其他设置只是更改了本程序中的设置，并非会对您的Windows操作系统的KMS激活设置造成影响。只有当您开始操作后，这里的KMS设置才被注入到您的Windows系统副本中。&quot;\n                x:Name=&quot;SettingsNotice&quot;&gt;\n            &lt;/InfoBar&gt;\n\n            &lt;!--副标题罢了。--&gt;\n            &lt;TextBlock x:Name=&quot;CommonSettings&quot; FontSize=&quot;20&quot; RelativePanel.Below=&quot;SettingsNotice&quot; Margin=&quot;0, 5&quot;&gt;\n                &lt;Bold&gt;常规设置&lt;/Bold&gt;\n            &lt;/TextBlock&gt;\n\n            &lt;!--KMS服务器地址输入框。--&gt;\n            &lt;TextBox Header=&quot;KMS服务器地址&quot; \n                     PlaceholderText=&quot;kms.exam.ple&quot; \n                     Width=&quot;300&quot; \n                     x:Name=&quot;KMSUrlBox&quot; \n                     TextChanging=&quot;KMSUrlBox_TextChanging&quot; \n                     RelativePanel.Below=&quot;CommonSettings&quot; \n                     Margin=&quot;0, 10&quot; \n                     Text=&quot;{x:Bind KMSUrl}&quot;/&gt;\n\n            &lt;!--错误提示语。--&gt;\n            &lt;TextBlock Visibility=&quot;Collapsed&quot; \n                       x:Name=&quot;KMSUrlBoxErrorHintText&quot; \n                       RelativePanel.Below=&quot;KMSUrlBox&quot; \n                       RelativePanel.AlignLeftWith=&quot;KMSUrlBox&quot; \n                       Padding=&quot;0, 10&quot;&gt;\n                不是一个KMS服务器地址。请不要带有“http://”、“https://”等前缀，并不要带有“/”、“\\”等斜杠。\n            &lt;/TextBlock&gt;\n\n            &lt;!--关于。--&gt;\n            &lt;StackPanel RelativePanel.Below=&quot;KMSUrlBoxErrorHintText&quot; Margin=&quot;0, 15&quot;&gt;\n                &lt;TextBlock FontSize=&quot;20&quot;&gt;&lt;Bold&gt;关于&lt;/Bold&gt;&lt;/TextBlock&gt;\n                &lt;TextBlock Margin=&quot;0, 10&quot;&gt;AC Activator 0.1.2&lt;/TextBlock&gt;\n                &lt;TextBlock&gt;by sereinmono&lt;/TextBlock&gt;\n                &lt;HyperlinkButton \n                    Content=&quot;查看Github上的项目页&quot;\n                    NavigateUri=&quot;https://github.com/sereinmono/ACActivator&quot; \n                    Margin=&quot;0, 10&quot; /&gt;\n            &lt;/StackPanel&gt;\n            \n        &lt;/RelativePanel&gt;\n        \n        &lt;Button \n            Margin=&quot;0, 0, 20, 20&quot; \n            Style=&quot;{StaticResource AccentButtonStyle}&quot; \n            HorizontalAlignment=&quot;Right&quot; \n            VerticalAlignment=&quot;Bottom&quot; \n            Click=&quot;SaveButton_Click&quot;&gt;\n            确定并应用\n        &lt;/Button&gt;\n    &lt;/Grid&gt;\n\n&lt;/Page&gt;\n</code></pre>\n<h2>后台业务逻辑的实现</h2>\n<h3><code>Settings</code> 类和 <code>SettingsInfo</code> 类</h3>\n<p>关键在于，我们要如何实现后台的逻辑，设置怎么存储，存储在哪里。</p>\n<p>对于一个使用紧凑打包的 Windows 程序来说，MSIX 严格限制了程序对文件的存储。对于我们的程序来说，是<strong>不能把文件直接存在程序所在的文件夹</strong>的。所以，我们将会把 settings.json 存在 AppData 文件夹中。要注意的是，MSIX 具有灵活的虚拟化，你所存入的 AppData 并不是真正的 AppData 文件夹，仅仅只是一个对特定于该用户和该应用的专门位置的映射，也就是一个『桌面桥』。</p>\n<p>之前我尝试过将 settings.json 存在应用所工作的文件夹中，结果会出现一个诡异的现象：从编译到运行都十分正常，IDE 无任何提示，生产环境的调试和运行过程中不会出现任何的报错，打包过程一切正常，安装 MSIX 也可以正常进行，<strong>但是在安装后就会闪退</strong>。</p>\n<p>为了支持对于设置的读写，我们先来创建『设置』类：</p>\n<pre><code class="language-c#"><span class="hljs-keyword">using</span> Newtonsoft.Json;\n<span class="hljs-keyword">using</span> System;\n<span class="hljs-keyword">using</span> System.Collections.Generic;\n<span class="hljs-keyword">using</span> System.IO;\n<span class="hljs-keyword">using</span> System.Linq;\n<span class="hljs-keyword">using</span> System.Text;\n<span class="hljs-keyword">using</span> System.Threading.Tasks;\n\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">ACActivator</span>\n{\n\n    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span>\n    <span class="hljs-comment"><span class="hljs-doctag">///</span> Settings：设置『类』。它是一个拥有着静态方法的静态类，无法被实例化，里面实现了读取设置数据和写入设置数据的方法。</span>\n    <span class="hljs-comment"><span class="hljs-doctag">///</span> SettingsInfo：真正存有设置数据的类，非静态，可以被实例化。</span>\n    <span class="hljs-comment"><span class="hljs-doctag">///</span> 它负责读写『settings.json』。一个序列化的SettingsInfo存入其中，需要读取时再反序列化。</span>\n    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span>\n\n    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">Settings</span>\n    {\n        <span class="hljs-keyword">readonly</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">string</span> strFilePath = Path.Combine(Windows.Storage.ApplicationData.Current.LocalFolder.Path, <span class="hljs-string">&quot;settings.json&quot;</span>);\n        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SettingsInfo <span class="hljs-title">ReadSettings</span>(<span class="hljs-params"></span>)</span>\n        {\n            <span class="hljs-keyword">if</span> (File.Exists(strFilePath))\n            {\n                SettingsInfo info = JsonConvert.DeserializeObject&lt;SettingsInfo&gt;(File.ReadAllText(strFilePath));\n                <span class="hljs-keyword">return</span> info;\n            }\n            <span class="hljs-keyword">else</span>\n            {\n                SettingsInfo info = <span class="hljs-keyword">new</span> SettingsInfo(<span class="hljs-string">&quot;kms.03k.org&quot;</span>, <span class="hljs-literal">false</span>);\n                WriteSettings(info);\n                <span class="hljs-keyword">return</span> info;\n            }\n        }\n\n        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">WriteSettings</span>(<span class="hljs-params">SettingsInfo info</span>)</span>\n        {\n            File.WriteAllText(strFilePath, JsonConvert.SerializeObject(info));\n        }\n    }\n\n    <span class="hljs-keyword">internal</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SettingsInfo</span>\n    { \n        <span class="hljs-keyword">public</span> <span class="hljs-built_in">string</span> KMSUrl;\n        <span class="hljs-keyword">public</span> <span class="hljs-built_in">bool</span> haveTaughtHowToStart;\n        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SettingsInfo</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> KMSUrl, <span class="hljs-built_in">bool</span> haveTaughtHowToStart</span>)</span>\n        {\n            <span class="hljs-keyword">this</span>.KMSUrl = KMSUrl;\n            <span class="hljs-keyword">this</span>.haveTaughtHowToStart = haveTaughtHowToStart;\n        }\n    }\n}\n</code></pre>\n<p>要注意的是，我们在 <code>ACActivator</code> 命名空间下创建了两个类：<code>Settings</code> 和 <code>SettingsInfo</code>。<code>Settings</code> 类是一个静态的类，无法被实例化，是一个用来实现对设置的操作的类；<code>SettingsInfo</code> 是一个可以被实例化的类，存储设置的内容，可以被序列化或反序列化，可存入 JSON 文件中或从 JSON 文件中读取。</p>\n<p>将读写设置的业务逻辑独立于 <code>SettingsPage</code> ，并创立单独的类来办这件事情的一大好处就在于能够实现更高的扩展性和复用性，代码也会变得简明而井井有条，不必将整个对设置的读写的业务逻辑捆绑在 <code>SettingsPage</code> 上，实现一个这样的『黑箱』也有助于防止在实现 <code>SettingsPage</code> 的过程中将经理过多的放在『如何实现设置的读写』一事上，看起来更加『优雅』些。不是吗？</p>\n<p>我们会将设置的相关内容存在 AppData 文件夹的 settings.json 文件中，序列化与反序列化的操作由 <code>NewtonSoft.Json</code> 代劳。不重复造轮子。</p>\n<h3>实现 <code>SettingsPage</code> 的后台逻辑</h3>\n<pre><code class="language-c#"><span class="hljs-keyword">using</span> Microsoft.UI.Xaml;\n<span class="hljs-keyword">using</span> Microsoft.UI.Xaml.Controls;\n<span class="hljs-keyword">using</span> Microsoft.UI.Xaml.Controls.Primitives;\n<span class="hljs-keyword">using</span> Microsoft.UI.Xaml.Data;\n<span class="hljs-keyword">using</span> Microsoft.UI.Xaml.Input;\n<span class="hljs-keyword">using</span> Microsoft.UI.Xaml.Media;\n<span class="hljs-keyword">using</span> Microsoft.UI.Xaml.Navigation;\n<span class="hljs-keyword">using</span> System;\n<span class="hljs-keyword">using</span> System.Collections.Generic;\n<span class="hljs-keyword">using</span> System.IO;\n<span class="hljs-keyword">using</span> System.Linq;\n<span class="hljs-keyword">using</span> System.Runtime.InteropServices.WindowsRuntime;\n<span class="hljs-keyword">using</span> Windows.Foundation;\n<span class="hljs-keyword">using</span> Windows.Foundation.Collections;\n<span class="hljs-keyword">using</span> System.Text.RegularExpressions;\n\n\n<span class="hljs-keyword">namespace</span> <span class="hljs-title">ACActivator</span>\n{\n    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span>\n    <span class="hljs-comment"><span class="hljs-doctag">///</span> 应用的设置页。</span>\n    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span>\n\n    <span class="hljs-keyword">public</span> <span class="hljs-keyword">sealed</span> <span class="hljs-keyword">partial</span> <span class="hljs-keyword">class</span> <span class="hljs-title">SettingsPage</span> : <span class="hljs-title">Page</span>\n    {\n        <span class="hljs-built_in">string</span> KMSUrl = Settings.ReadSettings().KMSUrl;\n        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SettingsPage</span>(<span class="hljs-params"></span>)</span>\n        {\n            <span class="hljs-keyword">this</span>.InitializeComponent();\n        }\n\n        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SaveButton_Click</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, RoutedEventArgs e</span>)</span>\n        {\n            <span class="hljs-comment">// 当确定并保存后，会检查KMS Server地址是否合法（有效），之后显示错误提示或保存。</span>\n            \n            SettingsInfo info = Settings.ReadSettings();\n            info.KMSUrl = KMSUrlBox.Text;\n\n            <span class="hljs-keyword">if</span> (Regex.IsMatch(KMSUrlBox.Text, <span class="hljs-string">@&quot;^(?=^.{3,255}$)[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+$&quot;</span>))\n            {\n                Settings.WriteSettings(info);\n            }\n            <span class="hljs-keyword">else</span>\n            {\n                KMSUrlBoxErrorHintText.Visibility = Visibility.Visible;\n            }\n        }\n\n        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">KMSUrlBox_TextChanging</span>(<span class="hljs-params">TextBox sender, TextBoxTextChangingEventArgs args</span>)</span>\n        {\n            <span class="hljs-comment">// 人家都想要改正错误了，提示就不要一直烦着人家了。</span>\n\n            KMSUrlBoxErrorHintText.Visibility = Visibility.Collapsed;\n        }\n    }\n}\n</code></pre>\n<p>我们来剖析一下这段代码是如何运行的——首先，当页面被初始化时，我们会预先将 <code>KMSUrlBox</code> 中填入当前已有的设置的内容。之后，当用户更改完内容，点击『确定并保存』时，将会首先将 KMS 地址同正则表达式相匹配。如果不匹配，则不保存并显示 <code>KMSUrlBoxErrorHintText</code> ，用户开始再次编辑 <code>KMSUrlBox</code> 中的内容时，<code>KMSUrlBoxErrorHintText</code> 也相应地隐去。如果匹配，就调用 <code>Settings.WriteSettings(info);</code> 来存入设置。</p>\n<h2>总结</h2>\n<p>我在本篇文章中创建了一个独立于操作页的设置页面，包括 <code>SettingsPage.xaml</code> 和 <code>SettingsPage.xmal.cs</code>，且将和设置修改相关的业务逻辑独立地分散在了 <code>Settings.cs</code> 中的 <code>Settings</code> 类和 <code>SettingsInfo</code> 类中。</p>\n<p>接下来，将会提到这个程序的核心部分——激活，是怎样实现的。</p>\n</section>\n'}}},l=(o(745),o(65)),c=o(66),r=o.n(c),d=o(724),component=Object(l.a)(e,(function(){var n=this,t=n.$createElement,o=n._self._c||t;return o("v-container",[o("div",{staticClass:"pt-16"}),n._v(" "),o("div",{staticClass:"pt-16"}),n._v(" "),o("div",{staticClass:"pt-16"}),n._v(" "),o("p",{staticClass:"font-weight-thin text-h5"},[n._v("2022.05.06")]),n._v(" "),o("div",{domProps:{innerHTML:n._s(n.md)}})])}),[],!1,null,null,null);t.default=component.exports;r()(component,{VContainer:d.a})}}]);