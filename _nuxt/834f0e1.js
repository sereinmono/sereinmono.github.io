(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{735:function(t,n,o){var content=o(744);content.__esModule&&(content=content.default),"string"==typeof content&&(content=[[t.i,content,""]]),content.locals&&(t.exports=content.locals);(0,o(19).default)("26334a30",content,!0,{sourceMap:!1})},743:function(t,n,o){"use strict";o(735)},744:function(t,n,o){var e=o(18)(!1);e.push([t.i,"h1{font-size:3.75rem}h1,h2{font-weight:300;padding-top:16}h2{font-size:3rem}h3{font-size:2.125rem}h3,h4{font-weight:400;padding-top:16}h4{font-size:1.5rem}h5{font-weight:500;font-size:1.25rem}h5,h6{padding-top:16}h6{font-weight:400;font-size:1rem}p{font-size:1.25rem;font-weight:300;padding-top:16}blockquote{padding-left:30px}.my-code{background-color:transparent}",""]),t.exports=e},764:function(t,n,o){"use strict";o.r(n);var e={name:"IndexPage",computed:{md:function(){return'<section><h1>AC Activator 开发记录（一）</h1>\n<h2>前言。</h2>\n<p>想必各位自己装机来使用 Windows 的朋友应该都或多或少听说过 KMS 激活这种玩意儿。KMS 激活的出现使得为大型组织提供批量的 Windows 激活变得更加便捷。然而，对于各位一开始了解 KMS 激活的朋友们，KMS 的使用流程貌似是略有点儿复杂。举个例子，如果你想要用 KMS 方式激活一台电脑，你要依次输入如下命令：</p>\n<pre><code class="language-bat">slmgr /ipk &lt;product key&gt;\nslmgr /skms &lt;kms server&gt;\nslmgr /ato\n</code></pre>\n<p>这三个步骤，缺一不可。对于一些『专业人士』来讲，这是十分简单的。但是，对于大多数第一次接触 Windows 操作系统安装的小白来说，这些在命令提示符上执行的命令貌似有点 <strong>过于复杂</strong> 了。</p>\n<p>为了进一步地简化流程，我开发了一个现代化的、简易的 GUI 工具，能够便捷地帮助小白完成 Windows 系统的 KMS 激活。同其他的 KMS 激活工具不同的是，本工具貌似是第一次使用 WinUI 3 作为 UI 平台组件的 KMS GUI 工具。使用 WinUI 3 的一条重要理由是为了摆脱目前已有的激活工具的简陋界面。同其他 KMS 激活工具相比，它的界面要更加简便，易于操作——更关键的是赏心悦目。</p>\n<h2>构建一个『美观的界面』：草图。</h2>\n<p>在构建这个应用之前，我设想的应用工作流程是这样的：</p>\n<p>打开 App -&gt; 用户点击激活按钮 -&gt; App 执行激活 -&gt; 提示用户激活完成。</p>\n<p>在构建激活的业务流程之前，我们先来构建一个美观的界面。</p>\n<p><img src="/blog/included_image/building_ac_activator/skeleton.png" alt="UI 草图" /></p>\n<p>我用一点时间自绘了一个软件界面的草图。通过草图，我们可以看到：应用的主窗口是一个 <code>NavigationView</code>，在 <code>NavigationView</code> 中是一个 <code>Frame</code>，内含着各个可供操作的页面（<code>Page</code>）。主页面的构造是左上角显示标题，中间放有给用户的提示，右下角留有『开始激活』的操作按钮。</p>\n<h2>MainWindow 的实现。</h2>\n<p>以下是  <code>MainWindow.xaml</code> 以及 <code>MainWindow.xaml.cs</code> 的内容：</p>\n<pre><code class="language-xaml">&lt;Window\n    x:Class=&quot;ACActivator.MainWindow&quot;\n    xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n    xmlns:local=&quot;using:ACActivator&quot;\n    xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;\n    xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot; \n    xmlns:animatedvisuals=&quot;using:ABI.Microsoft.UI.Xaml.Controls.AnimatedVisuals&quot;\n    mc:Ignorable=&quot;d&quot;\n    &gt;\n\n    &lt;NavigationView x:Name=&quot;NavView&quot;         \n                    PaneDisplayMode=&quot;Left&quot;\n                    IsBackButtonVisible=&quot;Collapsed&quot;\n                    ItemInvoked=&quot;NavView_ItemInvoked&quot;\n                    Loaded=&quot;NavView_Loaded&quot;\n                    PaneTitle=&quot;AC Activator&quot;       \n                    &gt;\n        &lt;NavigationView.MenuItems&gt;\n            &lt;NavigationViewItem Content=&quot;开始操作&quot; Tag=&quot;ActionPage&quot; Icon=&quot;Play&quot;/&gt;\n        &lt;/NavigationView.MenuItems&gt;\n        &lt;Frame x:Name=&quot;ContentFrame&quot; /&gt;\n    &lt;/NavigationView&gt;\n\n&lt;/Window&gt;\n</code></pre>\n<pre><code class="language-c#"><span class="hljs-keyword">namespace</span> <span class="hljs-title">ACActivator</span>\n{\n    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;summary&gt;</span></span>\n    <span class="hljs-comment"><span class="hljs-doctag">///</span> An empty window that can be used on its own or navigated to within a Frame.</span>\n    <span class="hljs-comment"><span class="hljs-doctag">///</span> <span class="hljs-doctag">&lt;/summary&gt;</span></span>\n    <span class="hljs-keyword">public</span> <span class="hljs-keyword">sealed</span> <span class="hljs-keyword">partial</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MainWindow</span> : <span class="hljs-title">Window</span>\n    {\n\n        <span class="hljs-keyword">private</span> <span class="hljs-built_in">string</span> tagNow = <span class="hljs-string">&quot;ActionPage&quot;</span>;\n        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MainWindow</span>(<span class="hljs-params"></span>)</span>\n        {\n            <span class="hljs-keyword">this</span>.InitializeComponent();\n            Title = <span class="hljs-string">&quot;AC Activator&quot;</span>;\n\n        }\n\n        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">NavView_ItemInvoked</span>(<span class="hljs-params">NavigationView sender, NavigationViewItemInvokedEventArgs args</span>)</span>\n        {\n            Type _page = <span class="hljs-keyword">typeof</span>(ActionPage);\n            <span class="hljs-keyword">if</span> (args.IsSettingsInvoked == <span class="hljs-literal">true</span>)\n            {\n                _page = <span class="hljs-keyword">typeof</span>(SettingsPage);\n                NavView.Header = <span class="hljs-string">&quot;设置&quot;</span>;\n            } \n            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (args.InvokedItemContainer.Tag.ToString() == <span class="hljs-string">&quot;ActionPage&quot;</span>)\n            {\n                _page = <span class="hljs-keyword">typeof</span>(ActionPage);\n                NavView.Header = <span class="hljs-string">&quot;开始操作&quot;</span>;                              \n            }\n\n            <span class="hljs-keyword">if</span> (args.InvokedItemContainer.Tag.ToString() != tagNow)  ContentFrame.Navigate(_page, <span class="hljs-literal">null</span>, args.RecommendedNavigationTransitionInfo);\n            tagNow = args.InvokedItemContainer.Tag.ToString();\n        }\n\n        <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">NavView_Loaded</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> sender, RoutedEventArgs e</span>)</span>\n        {\n            Type _page;\n            NavView.Header = <span class="hljs-string">&quot;开始操作&quot;</span>;\n            \n            _page = <span class="hljs-keyword">typeof</span>(ActionPage);\n            ContentFrame.Navigate(_page, <span class="hljs-literal">null</span>);\n            NavView.SelectedItem = NavView.MenuItems.OfType&lt;NavigationViewItem&gt;().First();\n        }\n\n    }\n}\n</code></pre>\n<h2>ActionPage 的实现。</h2>\n<p>接下来我们来设计操作页 <code>ActionPage</code> 。<code>ActionPage</code> 是用户进行主要的激活操作的页面。我想要通过这个页面达到的目标是：在页面中有几个提示，可以提醒用户注意更改 KMS 设置的危险性、劝导用户使用正版而非盗版、并且推广 GitHub 仓库。页面的右下角有一个按钮，点击按钮之后会在按钮上方弹出一个提示框，提醒用户正在使用的 KMS 服务器的地址并且再次同用户确认是否要继续操作。</p>\n<pre><code class="language-xaml">&lt;Page\n    x:Class=&quot;ACActivator.ActionPage&quot;\n    xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;\n    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;\n    xmlns:local=&quot;using:ACActivator&quot;\n    xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;\n    xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;\n    mc:Ignorable=&quot;d&quot;\n    Background=&quot;{ThemeResource ApplicationPageBackgroundThemeBrush}&quot;&gt;\n    &lt;Grid Background=&quot;{StaticResource acBackgroundBrush}&quot;&gt;\n        &lt;StackPanel Margin=&quot;55,20,20,0&quot; Background=&quot;{StaticResource acBackgroundBrush}&quot;&gt;\n            &lt;!--这里包含着页面的内容。--&gt;   \n        &lt;/StackPanel&gt;\n    &lt;/Grid&gt;    \n&lt;/Page&gt;\n</code></pre>\n<blockquote>\n<p>在这里面，你可能会很好奇 <code>{StaticResource acBackgroundBrush}</code> 是在哪里定义的。这一点会在接下来的『适配深色模式』中讲到。</p>\n</blockquote>\n<p>我准备用 <code>InfoBar</code> 来实现页面中对用户的提示。这样的提示比起直接将提示性的文字放在窗口中要更加的鲜明、美观、整洁。良好的，分成多段的且有着各自的『提升』的『模块』可以使得页面的分布更加有章法、有『节奏感』。你懂得，这是十分遵循『Fluent Design』的设计风格。</p>\n<p><img src="/blog/included_image/building_ac_activator/infobars.png" alt="提示" /></p>\n<p>这样的提示就是我的最终实现目标。可以看到，每一个提示都被分在了一个个小 <code>InfoBar</code> 里，整齐且各自有各自的色彩地排列在一起。</p>\n<p>以最下面的『支持我们』提示框为例。这个提示框左侧有一个 ❤ 的 Icon，右侧分别有着小标题『支持我们！』，正文和一个可供跳转至 GitHub 仓库上的链接按钮『看一眼我们的仓库』。</p>\n<pre><code class="language-xaml">&lt;InfoBar\n     IsOpen=&quot;True&quot;\n     IsClosable=&quot;True&quot;\n     Title=&quot;支持我们！&quot;\n     Margin=&quot;0, 1&quot;\n     Message=&quot;本程序使用热爱作为核心技术。访问托管于Github的项目来给本作品Star。当然，如果发现问题，疑难杂症也可以在这里解决。&quot;\n     Severity=&quot;Error&quot;&gt;\n         &lt;InfoBar.IconSource&gt;\n             &lt;FontIconSource Glyph=&quot;&amp;#xEB52;&quot; Foreground=&quot;DarkRed&quot;/&gt;\n         &lt;/InfoBar.IconSource&gt;\n         &lt;InfoBar.ActionButton&gt;\n             &lt;HyperlinkButton \n              Content=&quot;看一眼我们的仓库&quot;\n              NavigateUri=&quot;https://github.com/sereinmono/ACActivator&quot;\n              Foreground=&quot;DarkRed&quot;/&gt;\n&lt;/InfoBar.ActionButton&gt;\n</code></pre>\n<p>其中，小标题『支持我们』被赋值给 <code>InfoBar</code> 的属性 <code>Title</code>，其余的 <code>Message</code>、 <code>IconSource</code>、<code>ActionButton</code> 分别为提示消息的正文、图标和操作按钮。需要说明一下的是，<code>Serverity=&quot;Error&quot;</code> 只是为了给这个提示框一个粉红色的背景色，而并非真的同程序所产生的错误有什么联系。</p>\n<p>然后，我们要实现点击按钮后弹出的提示框。这个提示框中会弹出一条提醒你所使用的 KMS 服务器的提示，告诉你要核对下服务器，别再填错了地址。</p>\n<p><img src="/blog/included_image/building_ac_activator/flyout.png" alt="喂！兄弟，不核验一下吗？" /></p>\n<p>这个功能，就要借助于 <code>Flyout</code> 来实现。以下是这个按钮的实现代码：</p>\n<pre><code class="language-xaml">&lt;Button \n    Margin=&quot;0, 0, 20, 20&quot; \n    Style=&quot;{StaticResource AccentButtonStyle}&quot; \n    HorizontalAlignment=&quot;Right&quot; \n    VerticalAlignment=&quot;Bottom&quot; \n    Width=&quot;50&quot; \n    Height=&quot;50&quot; \n    x:Name=&quot;ActionButton&quot;&gt;\n    &lt;!--激活按钮--&gt;\n    &lt;FontIcon FontFamily=&quot;{StaticResource SymbolThemeFontFamily}&quot; Glyph=&quot;&amp;#xe945;&quot;/&gt;\n    &lt;Button.Flyout&gt;\n        &lt;!--提醒用户：注意KMS地址--&gt;\n        &lt;Flyout&gt;\n            &lt;StackPanel&gt;\n                &lt;TextBlock Style=&quot;{ThemeResource BaseTextBlockStyle}&quot; Text=&quot;{x:Bind noticeText}&quot; Margin=&quot;0,0,0,12&quot; x:Name=&quot;ButtonFlyoutText&quot;/&gt;\n                &lt;Button Content=&quot;明白，继续&quot; Click=&quot;Button_Click&quot;/&gt;\n            &lt;/StackPanel&gt;\n        &lt;/Flyout&gt;\n    &lt;/Button.Flyout&gt;\n&lt;/Button&gt;\n</code></pre>\n<p>到现在为止，成功实现了一个美观的主界面，它具有完全符合 Fluent Design 设计语言的 UI，同时基于用户以人性化的、简洁的体验。在之后的文章中，会提到如何实现设置界面，以及最重要的——如何实现调用 KMS 执行实行激活。</p>\n</section>\n'}}},l=(o(743),o(65)),c=o(66),r=o.n(c),d=o(724),component=Object(l.a)(e,(function(){var t=this,n=t.$createElement,o=t._self._c||n;return o("v-container",[o("div",{staticClass:"pt-16"}),t._v(" "),o("div",{staticClass:"pt-16"}),t._v(" "),o("div",{staticClass:"pt-16"}),t._v(" "),o("p",{staticClass:"font-weight-thin text-h5"},[t._v("2022.05.04")]),t._v(" "),o("div",{domProps:{innerHTML:t._s(t.md)}})])}),[],!1,null,null,null);n.default=component.exports;r()(component,{VContainer:d.a})}}]);